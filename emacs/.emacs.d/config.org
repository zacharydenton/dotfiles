#+TITLE: Emacs Configuration

* Package management

The first thing to do is set up the package management system. Add a
few more package repositories in addition to the default one.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (setq package-archives '(("org" . "https://orgmode.org/elpa/")
    ("gnu" . "https://elpa.gnu.org/packages/")
    ("melpa" . "https://melpa.org/packages/")))
  (setq use-package-always-ensure t)
  (package-initialize)
#+END_SRC

Next, we want to ensure that use-package is installed and activated.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
#+END_SRC

* UI configuration

Set the colorscheme.

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :config
    (load-theme 'zenburn t))
#+END_SRC

Disable all of the UI elements.

#+BEGIN_SRC emacs-lisp
  (if (display-graphic-p)
    (progn
      (scroll-bar-mode -1)
      (tool-bar-mode -1)
      (set-fringe-mode 0)
      (tooltip-mode -1)))
  (menu-bar-mode -1)
  (blink-cursor-mode 0)
#+END_SRC

Set the font to Terminus.

#+BEGIN_SRC emacs-lisp
  (set-frame-font (font-spec :family "Terminus" :size 20))

;; WSL-specific setup
(when (and (eq system-type 'gnu/linux)
       (getenv "WSLENV"))

 ;; Teach Emacs how to open links in your default Windows browser
 (let ((cmd-exe "/mnt/c/Windows/System32/cmd.exe")
       (cmd-args '("/c" "start")))
  (when (file-exists-p cmd-exe)
   (setq browse-url-generic-program  cmd-exe
    browse-url-generic-args     cmd-args
    browse-url-browser-function 'browse-url-generic
    search-web-default-browser 'browse-url-generic))))
#+END_SRC

* General settings

Various general settings.

#+BEGIN_SRC emacs-lisp
  (setq-default
   fill-column 80
   inhibit-startup-screen t
   initial-scratch-message ""
   mouse-yank-at-point t)
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024))
#+END_SRC

CTRL-h is backspace.

#+BEGIN_SRC emacs-lisp
  (keyboard-translate ?\C-h ?\C-?)
#+END_SRC

Display time and loadavg in the modeline.

#+BEGIN_SRC emacs-lisp
  (display-time-mode 1)
#+END_SRC

Turn on auto-fill-mode almost everywhere.

#+BEGIN_SRC emacs-lisp
  (use-package simple
    :ensure nil
    :hook
    ((prog-mode . turn-on-auto-fill)
     (text-mode . turn-on-auto-fill)))
#+END_SRC

Show matching parentheses.

#+BEGIN_SRC emacs-lisp
  (setq show-paren-delay 0)
  (show-paren-mode 1)
#+END_SRC

Don't backup files in the same directory.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.saves")))
  (setq backup-by-copying t)
  (setq auto-save-default nil)
#+END_SRC

* Evil mode

This requires its own config section.

#+BEGIN_SRC emacs-lisp
  (setq evil-want-C-u-scroll t)
  (use-package evil
    :config
    (evil-mode 1))
#+END_SRC

No search highlighting.

#+BEGIN_SRC emacs-lisp
  (setq-default evil-ex-search-highlight-all nil)
#+END_SRC

Set jump behavior to match vim (i.e. jumping to and from dired
buffers, scratch buffers, etc.).

#+BEGIN_SRC emacs-lisp
  (defun my-rename-dired-buffer ()
    (interactive)
    (unless (string-match-p "Dired:" (buffer-name))
      (rename-buffer (concat "Dired:" (buffer-name)))))

  (add-hook 'dired-mode-hook 'my-rename-dired-buffer)
  (setq evil--jumps-buffer-targets "\\(\\*\\(\\new\\|scratch\\)\\*\\|Dired:.+\\)")
  (evil-add-command-properties #'dired-find-file :jump t)
#+END_SRC

Also, it should be possible to do CTRL-w CTRL-hjkl to switch windows.

#+BEGIN_SRC emacs-lisp
  (define-key evil-window-map (kbd "DEL") 'evil-window-left)
  (define-key evil-window-map (kbd "C-j") 'evil-window-down)
  (define-key evil-window-map (kbd "C-k") 'evil-window-up)
  (define-key evil-window-map (kbd "C-l") 'evil-window-right)
#+END_SRC

Remove unwanted auto-indent in org mode.

#+BEGIN_SRC emacs-lisp
  (setq evil-auto-indent nil)
#+END_SRC

* Rust

Auto-format Rust code.

#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :config
    (setq rust-format-on-save t))
#+END_SRC

Use RLS to provide Rust IDE features.

Excessive UI feedback for light reading between coding.

* Typescript

#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode)
#+END_SRC

* Org mode

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (defun zd/org-capture-log ()
    (interactive)
    "Capture a log entry"
    (org-capture nil "l"))
  (define-key global-map (kbd "C-3") 'zd/org-capture-log)
  (use-package gnuplot-mode)
  (setq org-link-abbrev-alist
	'(("google" . "https://www.google.com/search?q=")
	  ("wiki" . "https://en.wikipedia.org/wiki/%s")))
  (setq org-agenda-files '("~/memex/README.org"))
  (setq org-agenda-include-diary t)
  (setq org-latex-create-formula-image-program 'dvisvgm)
  (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
  (org-babel-do-load-languages 'org-babel-load-languages
			       '((shell . t)))
  (setq org-capture-templates
	'(("l" "Log" entry (file+olp+datetree "~/memex/README.org" "Log")
	   "* %?" :unnarrowed t :immediate-finish t :jump-to-captured t)))
#+END_SRC

* Miscellaneous

SICP in emacs.

#+BEGIN_SRC emacs-lisp
  (use-package sicp)
#+END_SRC

