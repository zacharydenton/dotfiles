#+TITLE: Emacs Configuration

* Package management

The first thing to do is set up the package management system. Add a
few more package repositories in addition to the default one.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (setq package-archives '(("org" . "https://orgmode.org/elpa/")
    ("gnu" . "https://elpa.gnu.org/packages/")
    ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)
#+END_SRC

Next, we want to ensure that use-package is installed and activated.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
#+END_SRC

* UI configuration

Set the colorscheme.

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t
    :config
    (load-theme 'zenburn t))
#+END_SRC

Disable all of the UI elements.

#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (set-fringe-mode 0)
  (blink-cursor-mode 0)
#+END_SRC

Set the font to Terminus.

#+BEGIN_SRC emacs-lisp
  (set-frame-font (font-spec :family "xos4 Terminus" :size 20))
#+END_SRC

* General settings

Various general settings.

#+BEGIN_SRC emacs-lisp
  (setq-default
   fill-column 80
   inhibit-startup-screen t
   initial-scratch-message ""
   mouse-yank-at-point t)
#+END_SRC

CTRL-h is backspace.

#+BEGIN_SRC emacs-lisp
  (keyboard-translate ?\C-h ?\C-?)
#+END_SRC

Display time and loadavg in the modeline.

#+BEGIN_SRC emacs-lisp
  (display-time-mode 1)
#+END_SRC

Turn on auto-fill-mode almost everywhere.

#+BEGIN_SRC emacs-lisp
  (use-package simple
    :ensure nil
    :hook
    ((prog-mode . turn-on-auto-fill)
     (text-mode . turn-on-auto-fill)))
#+END_SRC

Show matching parentheses.

#+BEGIN_SRC emacs-lisp
  (setq show-paren-delay 0)
  (show-paren-mode 1)
#+END_SRC

Don't backup files in the same directory.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . "~/.saves")))
  (setq backup-by-copying t)
  (setq auto-save-default nil)
#+END_SRC

* Evil mode

This requires its own config section.

#+BEGIN_SRC emacs-lisp
  (setq evil-want-C-u-scroll t)
  (use-package evil
    :ensure t
    :config
    (evil-mode 1))
#+END_SRC

No search highlighting.

#+BEGIN_SRC emacs-lisp
  (setq-default evil-ex-search-highlight-all nil)
#+END_SRC

Set jump behavior to match vim (i.e. jumping to and from dired
buffers, scratch buffers, etc.).

#+BEGIN_SRC emacs-lisp
  (defun my-rename-dired-buffer ()
    (interactive)
    (unless (string-match-p "Dired:" (buffer-name))
      (rename-buffer (concat "Dired:" (buffer-name)))))

  (add-hook 'dired-mode-hook 'my-rename-dired-buffer)
  (setq evil--jumps-buffer-targets "\\(\\*\\(\\new\\|scratch\\)\\*\\|Dired:.+\\)")
  (evil-add-command-properties #'dired-find-file :jump t)
#+END_SRC

Also, it should be possible to do CTRL-w CTRL-hjkl to switch windows.

#+BEGIN_SRC emacs-lisp
  (define-key evil-window-map (kbd "DEL") 'evil-window-left)
  (define-key evil-window-map (kbd "C-j") 'evil-window-down)
  (define-key evil-window-map (kbd "C-k") 'evil-window-up)
  (define-key evil-window-map (kbd "C-l") 'evil-window-right)
#+END_SRC

* Rust

Auto-format Rust code.

#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :config
    (setq rust-format-on-save t))
#+END_SRC

Use RLS to provide Rust IDE features.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t)
  (use-package lsp-mode
    :ensure t
    :config
    (add-hook 'rust-mode-hook #'lsp)
    (add-hook 'rust-mode-hook #'flycheck-mode))
#+END_SRC

Excessive UI feedback for light reading between coding.

#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :ensure t
    :config
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))
#+END_SRC

Add autocompletion support.

#+BEGIN_SRC emacs-lisp
  (use-package company-lsp
    :ensure t
    :config
    (push 'company-lsp company-backends)
    (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common))
#+END_SRC

* Miscellaneous

SICP in emacs.

#+BEGIN_SRC emacs-lisp
  (use-package sicp
    :ensure t)
#+END_SRC
